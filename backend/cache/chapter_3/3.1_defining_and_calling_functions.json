{
  "section_info": {
    "section_number": "3.1",
    "title": "Defining and Calling Functions",
    "description": "The basics of creating and using functions.",
    "learning_outcomes": [
      "Understand the syntax of function definition.",
      "Write functions to encapsulate reusable code blocks."
    ],
    "subsections": [
      {
        "subsection_number": "3.1.1",
        "title": "Function Syntax",
        "description": "Covers how to define and document a function."
      },
      {
        "subsection_number": "3.1.2",
        "title": "Calling Functions",
        "description": "How to execute functions and pass information to them."
      }
    ]
  },
  "subsections": [
    {
      "subsection_info": {
        "subsection_number": "3.1.1",
        "title": "Function Syntax",
        "description": "Covers how to define and document a function."
      },
      "content": "# Function Syntax\n\nIn Python, functions are blocks of code designed to perform a specific task, improving modularity and reusability in programming. Understanding the syntax of defining and calling functions is fundamental to leveraging Python's capabilities for both simple and complex tasks. This section delves into the syntax and conceptual framework behind Python functions, providing a foundational understanding that is crucial for effective function-driven development.\n\n## Concepts and Theory\n\n### Defining Functions in Python\nFunctions in Python are defined using the `def` keyword, followed by the function name and parentheses `()` which may include parameters. The function body, a block of code to be executed when the function is called, is indented beneath the definition. Functions can also include a `return` statement to send back output to the caller.\n\n### Parameters vs. Arguments\n- **Parameters** are variables listed inside the parentheses in the function definition. \n- **Arguments** are values passed to and received by the parameters when the function is called.\n\n### Function Calling\nTo execute a function, you call it by its name followed by parentheses. If the function requires arguments, the respective values are included within these parentheses.\n\n### The `return` Statement\nFunctions can send Python objects back to the caller using the `return` statement. If a function doesn't explicitly return a value, it implicitly returns `None`.\n\n## Examples and Implementation\n\n### Defining a Simple Function\n```python\ndef greet():\n    print(\"Hello, World!\")\n\ngreet()\n```\n\n### Function with Parameters and Return Statement\n```python\ndef add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(result)\n```\n\n### Functions Without `return` Statement\n```python\ndef say_goodbye(name):\n    print(f\"Goodbye, {name}!\")\n\nsay_goodbye(\"Alice\")\n```\n\n## Practice Exercises\n\n1. Write a function named `multiply` that takes two parameters and returns their product.\n2. Create a function `is_even` that takes a number as an argument and returns `True` if the number is even, otherwise `False`.\n3. Define a function `find_max` that takes three arguments and returns the highest value.\n4. Write a function `concat_strings` that accepts two strings and returns their concatenation.\n5. Implement a function `count_vowels` that takes a string and returns the number of vowels (`a`, `e`, `i`, `o`, `u`) in the string.\n\n## Key Takeaways\n\n- **Function Syntax**: Learning the proper syntax for defining and calling functions is crucial for writing clean and efficient Python code.\n- **Modularity and Reusability**: Functions break down complex processes into smaller, manageable parts, making code more modular and reusable.\n- **Parameters and Arguments**: Understanding the difference between parameters (function inputs defined in the function) and arguments (actual values passed to the function) is important.\n- **Return Statement**: Functions can return values to the caller using the `return` statement, enriching the ways functions can communicate outcomes.\n- **Practice**: Writing and calling functions with various parameters and return types is a fundamental skill for programmers, emphasizing the practical application of concepts for effective learning."
    },
    {
      "subsection_info": {
        "subsection_number": "3.1.2",
        "title": "Calling Functions",
        "description": "How to execute functions and pass information to them."
      },
      "content": "# Calling Functions\n\nIn Python, functions are defined blocks of reusable code aimed at carrying out a specific task. Once a function is defined, it can be used or \"called\" in various parts of a program. This section delves into the mechanisms of calling functions in Python, including passing arguments and the significance of a function's return value. Understanding how to call functions properly is a cornerstone of functional programming and a fundamental aspect of structuring and organizing code efficiently.\n\n## Concepts and Theory\n\n### Defining Functions\n\nBefore you can call a function, it must be defined. The definition includes the function name and possibly a list of parameters. The syntax for defining a function is:\n\n```python\ndef function_name(parameters):\n    # function body\n```\n\n### Calling Functions\n\nOnce defined, a function can be called using its name followed by parentheses. If the function requires parameters, the arguments corresponding to those parameters are placed within these parentheses.\n\n### Function Arguments\n\nArguments are the values you pass into the function's parameters when you call it. Python supports various types of arguments:\n\n- **Positional Arguments**: These are arguments that need to be in the same order as their respective parameters in the function definition.\n- **Keyword Arguments**: These are arguments where each argument is specified by the parameter name and its corresponding value.\n- **Default Arguments**: These are parameters that assume a default value if no argument is passed during the function call.\n\n### Return Values\n\nA function can return a value back to the caller using the `return` statement. If no `return` statement is present, the function returns `None`.\n\n## Examples and Implementation\n\n### Example of Defining and Calling a Simple Function\n\n```python\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n```\n\nThis example defines a function `greet` that takes a single parameter `name` and returns a greeting string.\n\n### Using Positional and Keyword Arguments\n\n```python\ndef describe_pet(animal_type, pet_name):\n    print(f\"I have a {animal_type} named {pet_name}.\")\n\ndescribe_pet('hamster', 'Harry')  # Positional arguments\ndescribe_pet(pet_name='Will', animal_type='dog')  # Keyword arguments\n```\n\n### Specifying Default Values\n\n```python\ndef describe_city(city, country='France'):\n    print(f\"{city} is in {country}.\")\n\ndescribe_city('Paris')\ndescribe_city('Lyon')\ndescribe_city('New York', 'USA')\n```\n\nIn this example, `country` has a default value of `'France'`, so it is optional to specify it when calling the function.\n\n## Practice Exercises\n\n1. **Temperature Converter Function**: Write a function named `convert_temp` that converts temperature from Fahrenheit to Celsius. The formula is `(Fahrenheit - 32) * 5/9`. Then, call this function with various Fahrenheit values to see their Celsius conversions.\n\n2. **Multiplication Table**: Create a function called `print_multiplication_table` that takes a number and prints its multiplication table up to 10. For instance, `print_multiplication_table(3)` should print the 3 times table.\n\n3. **Sum of Numbers**: Write a function `sum_numbers` that takes a list of numbers as an argument and returns the sum of those numbers. Use the function to calculate the sum of a list containing `1, 2, 3, 4, 5`.\n\n## Key Takeaways\n\n- A function must be defined before it can be called, and its definition includes its name and parameters.\n- Functions are called using their name followed by parentheses, which may include arguments matching the function's parameters.\n- Arguments can be positional, keyword, or default, influencing how they match up with the function's parameters.\n- Functions can return values to the caller using the `return` statement, making them powerful tools for reusing and structuring code efficiently.\n- Practicing with examples and exercises can help solidify understanding of concepts related to calling functions in Python."
    }
  ]
}