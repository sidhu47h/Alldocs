{
  "section_info": {
    "section_number": "4.1",
    "title": "Object-Oriented Programming (OOP)",
    "description": "Basics of OOP in Python, including classes and inheritance.",
    "learning_outcomes": [
      "Define classes and create objects in Python.",
      "Understand the principles of inheritance and polymorphism."
    ],
    "subsections": [
      {
        "subsection_number": "4.1.1",
        "title": "Introduction to Classes",
        "description": "How to define and use classes in Python."
      },
      {
        "subsection_number": "4.1.2",
        "title": "Inheritance",
        "description": "Explaining how inheritance is implemented in Python."
      }
    ]
  },
  "subsections": [
    {
      "subsection_info": {
        "subsection_number": "4.1.1",
        "title": "Introduction to Classes",
        "description": "How to define and use classes in Python."
      },
      "content": "# Introduction to Classes\n\nObject-oriented programming (OOP) is a paradigm in software design that organizes code around the concept of objects, which are instances of classes. Classes serve as blueprints for creating objects, encapsulating data for the object and methods to manipulate that data. Understanding classes is fundamental to mastering OOP in Python, as they enable the development of complex and scalable software systems.\n\n## Concepts and Theory\n\n### What Are Classes?\nClasses are foundational constructs in Python that define the structure and behaviors of the objects instantiated from them. They encapsulate data attributes and functions, known as methods, which operate on the data. The class acts as a blueprint for creating instances (objects), each with its unique set of attributes and methods.\n\n### Characteristics of Classes\n- **Encapsulation**: Classes bundle data (attributes) and methods (functions that act on the data) into a single unit.\n- **Inheritance**: This allows a class to inherit attributes and methods from another class, promoting code reuse.\n- **Polymorphism**: Through inheritance, a subclass can modify or extend the functionalities of its parent class.\n\n### Key Components\n- **Attributes**: Variables that hold data pertaining to the class and its objects.\n- **Methods**: Functions defined within a class that can manipulate the attributes of the class or perform actions related to the class's objects.\n\n## Examples and Implementation\n\n### Defining a Simple Class\nLet's define a simple `Car` class to illustrate the concepts discussed.\n\n```python\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def describe_car(self):\n        print(f\"{self.make} {self.model} {self.year}\")\n```\n\n- `__init__` is a special method called a class constructor that initializes new objects.\n- `self` refers to the instance calling the method.\n- `describe_car` is a custom method that prints the car's details.\n\n### Creating an Instance of a Class\nTo create an object of the `Car` class, you simply call the class using its name and pass the required arguments, other than `self`, which is passed automatically.\n\n```python\nmy_car = Car(\"Toyota\", \"Corolla\", 2022)\nmy_car.describe_car()  # Output: Toyota Corolla 2022\n```\n\n### Modifying an Attribute\nAttributes of an instance can be modified directly or through a method.\n\n```python\n# Direct modification\nmy_car.year = 2023\n\n# Using a method\ndef update_year(self, new_year):\n    self.year = new_year\n\nmy_car.update_year(2023)\n```\n\n## Practice Exercises\n\n1. **Create a `Book` class** with `title`, `author`, and `year_published` as attributes and a method to display the book's information.\n2. **Extend the `Car` class** with a method `drive()` that prints a message including the make and model, simulating driving the car.\n3. **Write a `Rectangle` class** with `length` and `width` as attributes and methods to calculate the area and perimeter of the rectangle.\n\n## Key Takeaways\n\n- Classes in Python are used to define the structure and behaviors of objects, encapsulating both data and the methods to operate on that data.\n- Key components of a class include attributes (data) and methods (functions) that act on the data.\n- Classes support the principles of **encapsulation**, **inheritance**, and **polymorphism**, which are fundamental to object-oriented programming.\n- Instantiating a class creates an object, which is an instance of that class with its own distinct set of attributes and methods that can be manipulated to perform actions or calculate values.\n- Practice with defining classes, creating instances, and working with attributes and methods is essential for proficiency in Python's OOP paradigm."
    },
    {
      "subsection_info": {
        "subsection_number": "4.1.2",
        "title": "Inheritance",
        "description": "Explaining how inheritance is implemented in Python."
      },
      "content": "# Inheritance\n\nInheritance is a fundamental concept in object-oriented programming (OOP) that allows one class to inherit properties and methods from another. This mechanism facilitates code reuse, improves code organization, and enables the creation of hierarchical class structures. By utilizing inheritance, programmers can create new classes (known as child or derived classes) that build upon existing classes (referred to as parent or base classes), thus inheriting their attributes and behaviors while also introducing new features or overriding existing ones. This section delves into the concepts and theory behind inheritance, demonstrates it through Python examples, and provides exercises for hands-on practice.\n\n## Concepts and Theory\n\n### Defining Inheritance\nInheritance is a way to form new classes using classes that have already been defined. The newly formed classes are called derived classes, and the classes that derived classes are based on are called base classes. Important characteristics of inheritance include the ability to reuse existing code as well as to implement polymorphism.\n\n### Types of Inheritance\n1. **Single Inheritance**: Where a derived class inherits from only one base class.\n2. **Multiple Inheritance**: Where a derived class inherits from more than one base class.\n3. **Multilevel Inheritance**: This involves a chain of inheritance, where a derived class inherits from a base class, which in turn is derived from another class.\n4. **Hierarchical Inheritance**: Multiple classes derive from the same base class.\n5. **Hybrid Inheritance**: A combination of two or more types of inheritance.\n\n### Advantages of Using Inheritance\n- **Code Reuse**: Allows for the reuse of attributes and methods from the base class, reducing redundancy.\n- **Simplicity**: Makes the creation of complex objects simpler.\n- **Extensibility**: Enhances the extensibility of the code, as modifications in the base class are automatically propagated to derived classes.\n- **Polymorphism**: Facilitates polymorphism, which allows methods to do different things based on the object that is invoking them.\n\n## Examples and Implementation\n\n### Single Inheritance Example\nLet's illustrate single inheritance with a basic example where a `Dog` class inherits from an `Animal` class.\n\n```python\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        raise NotImplementedError(\"Subclass must implement abstract method\")\n\nclass Dog(Animal):\n    def speak(self):\n        return f\"{self.name} says Woof!\"\n\n# Usage\nmy_dog = Dog(\"Buddy\")\nprint(my_dog.speak())\n```\n\n### Multiple Inheritance Example\nHere, we demonstrate multiple inheritance where a `SmartPhone` class inherits from both `Camera` and `Phone` classes.\n\n```python\nclass Camera:\n    def capture(self):\n        return \"Captured a photo\"\n\nclass Phone:\n    def call(self, number):\n        return f\"Calling {number}\"\n\nclass SmartPhone(Camera, Phone):\n    def do_everything(self):\n        return f\"{self.capture()} and {self.call('123-456-7890')}\"\n\n# Usage\nmy_phone = SmartPhone()\nprint(my_phone.do_everything())\n```\n\n## Practice Exercises\n\n1. **Simple Inheritance**: Create a base class named `Vehicle` with methods `start` and `stop`. Then, create a derived class named `Car` that inherits from `Vehicle` and adds an additional method, `park`.\n2. **Multiple Inheritance**: Design two base classes, `Father` and `Mother`, with distinct attributes or methods. Create a child class `Child` that inherits attributes and methods from both `Father` and `Mother`.\n3. **Override a Method**: In the context of inheritance, create a base class `Shape` with a method `area` and a derived class `Square` that overrides the `area` method.\n\n## Key Takeaways\n\n- **Inheritance** is a key principle in OOP that enables classes to inherit properties and methods from other classes, fostering code reuse and hierarchical class design.\n- There are several **types of inheritance**, including single, multiple, multilevel, hierarchical, and hybrid inheritance. The choice of inheritance type depends on the specific requirements of the design.\n- Utilizing inheritance allows for code **reuse**, **simplicity** in object creation, **extensibility**, and supports **polymorphism**.\n- Inheritance hierarchies should be designed thoughtfully to maintain **code readability and maintainability**."
    }
  ]
}