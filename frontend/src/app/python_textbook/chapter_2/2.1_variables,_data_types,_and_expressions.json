{
  "section_info": {
    "section_number": "2.1",
    "title": "Variables, Data Types, and Expressions",
    "description": "Introduction to variables, data types, and how to perform calculations.",
    "learning_outcomes": [
      "Declare variables and assign values in Python.",
      "Understand and utilize Python's core data types."
    ],
    "subsections": [
      {
        "subsection_number": "2.1.1",
        "title": "Variables and Assignments",
        "description": "How to name variables and assign them values."
      },
      {
        "subsection_number": "2.1.2",
        "title": "Data Types Overview",
        "description": "An introduction to Python's built-in data types."
      }
    ]
  },
  "subsections": [
    {
      "subsection_info": {
        "subsection_number": "2.1.1",
        "title": "Variables and Assignments",
        "description": "How to name variables and assign them values."
      },
      "content": "# Variables and Assignments\n\nIn Python, variables are symbolic names that reference or point to a location in memory where data (or objects) can be stored. Unlike some programming languages, Python does not require explicit declaration of a variable before it is used. A variable is created the moment a value is assigned to it through an assignment operation. This ease of use and flexibility makes Python an accessible and powerful programming language for both beginners and seasoned developers. Understanding how variables work and how they are assigned is fundamental in mastering Python programming.\n\n## Concepts and Theory\n\n### The Assignment Operation\nThe assignment operation in Python is carried out using the equals sign (`=`). When an assignment is made, the variable on the left of the `=` operator is linked to the object or value on the right. This link is more accurately described as a reference, whereby the variable references the memory location where the value is stored.\n\n### Variable Naming Rules\nPython has a few simple rules for naming variables:\n- Variable names must start with a letter (a-z, A-Z) or an underscore (`_`).\n- The rest of the name can contain letters, numbers, and underscores.\n- Names are case-sensitive (`age`, `Age`, and `AGE` are three different variables).\n- Reserved words or keywords that Python uses cannot be used as variable names.\n\n### Data Types\nVariables in Python can hold values of different data types. The primary types include:\n- **Integers** (`int`): Whole numbers, positive or negative.\n- **Floating-point numbers** (`float`): Numbers with a decimal point.\n- **Strings** (`str`): A sequence of characters.\n- **Boolean** (`bool`): Represents `True` or `False`.\n- Additionally, Python supports complex data types like lists, tuples, sets, and dictionaries for more complex data structures.\n\n### Mutable vs Immutable Data Types\n- **Immutable** data types (int, float, str, tuple, bool) cannot be changed after they are created. Any operation that modifies the value actually creates a new object.\n- **Mutable** data types (list, set, dictionary) can be changed after creation, allowing modification of their content without creating a new object.\n\n## Examples and Implementation\n\n```python\n# Assigning values to variables\nage = 30           # An integer assignment\nsalary = 4856.75   # A floating-point number assignment\nname = \"Alice\"     # A string assignment\nis_employee = True # A boolean assignment\n\n# Multiple assignments\nx, y, z = 1, 2, \"hello\"\n\n# Dynamic typing\nx = 15      # Here x is an integer\nx = \"Sara\"  # Now x is a string\n\nprint(age, salary, name, is_employee, x, y, z)\n```\n\nThis example demonstrates the ease with which variables can be assigned and re-assigned to different data types, showcasing Python's dynamic typing feature.\n\n## Practice Exercises\n\n1. Create variables to store your name, age, and an array of your favorite hobbies. Print them out in a sentence.\n2. Write a program where you assign a number to a variable and then update that variable to hold the result of that number multiplied by 2. Print the final result.\n3. Try creating a variable with the name of a Python keyword (like `for`). What error do you receive?\n4. Swap the values of two variables without using a temporary third variable.\n\n## Key Takeaways\n\n- Variables in Python are created through assignment and do not need explicit declaration.\n- Python's dynamic typing allows variables to be reassigned to values of different data types.\n- The naming of variables in Python follows certain rules that must be adhered to, ensuring clarity and avoid conflicts with Python's keywords.\n- Understanding mutable and immutable data types is crucial for effective programming in Python, as it affects how and when values of variables can change.\n- Through practice and familiarity with Python's variable assignment and data types, developers can efficiently store, modify, and utilize data in their programs."
    },
    {
      "subsection_info": {
        "subsection_number": "2.1.2",
        "title": "Data Types Overview",
        "description": "An introduction to Python's built-in data types."
      },
      "content": "# Data Types Overview\n\nIn Python programming, understanding data types is fundamental to effectively manipulating and processing information. Data types specify the kind of data that a variable can hold, such as numbers, text, or more complex structures like lists and dictionaries. This section provides an overview of Python's basic and advanced data types, their properties, and how they are used in Python programming. Grasping these concepts is crucial for beginners to build a strong foundation in Python and for experienced programmers to enhance their code's efficiency and readability.\n\n## Concepts and Theory\n\nPython is a dynamically typed language, which means that you don't have to declare the type of variable while creating it. However, knowing the types and their capabilities is vital. Python supports several built-in data types, some of which are:\n\n- **Primitive Types**: Include `int`, `float`, `bool`, and `str`.\n- **None Type**: Represented by `None`, it denotes the absence of value.\n- **Sequence Types**: Include `list`, `tuple`, and `str`.\n- **Mapping Type**: The primary example is `dict`.\n- **Set Types**: Include `set` and `frozenset`.\n- **Binary Types**: Include `bytes`, `bytearray`, and `memoryview`.\n\nEach of these types has its unique properties and is used in different scenarios depending on the requirements of the program.\n\n### Primitive Types\nPrimitive types are the basic data types that include:\n\n- **Integers (`int`)**: Represent whole numbers, positive or negative, without decimals.\n- **Floating Point Numbers (`float`)**: Represent real numbers and include decimal points.\n- **Booleans (`bool`)**: Can only hold two values: `True` or `False`.\n- **Strings (`str`)**: Used to represent text data enclosed in single, double, or triple quotes.\n\n### Composite Types\nApart from the primitive data types, Python supports types that can hold collections of values.\n\n- **Lists**: Ordered and mutable collections of items.\n- **Tuples**: Ordered and immutable collections of items.\n- **Dictionaries**: Unordered collections of key-value pairs.\n- **Sets**: Unordered collections of unique elements.\n\nUnderstanding the differences between these types and when to use one over the other is crucial for efficient Python programming.\n\n## Examples and Implementation\n\nTo better understand how data types work in Python, let's look at some examples:\n\n```python\n# Integer\nvar1 = 10\n# Float\nvar2 = 20.5\n# Boolean\nvar3 = True\n# String\nvar4 = \"Hello, world!\"\n\n# List\nvar5 = [1, 2, 3, 4, 5]\n# Tuple\nvar6 = (1, 2, 3, 4, 5)\n# Dictionary\nvar7 = {'name': 'John', 'age': 30}\n# Set\nvar8 = {1, 2, 3, 4, 5}\n```\n\nNote how each type of data structure is used for different kinds of data representation.\n\n## Practice Exercises\n\n1. Create a variable for each data type (int, float, bool, str, list, tuple, dict, set) and assign an appropriate value to each.\n2. Write a Python script to convert a float to an integer.\n3. Create a list containing several integers, then append a new integer to it.\n4. Create a dictionary representing a person (including name, age, and city), then access and print the person's age.\n5. Check if an item exists in a set and print a message stating whether or not it exists.\n\n## Key Takeaways\n\n- Python supports various data types, including primitive types (`int`, `float`, `bool`, `str`), composite types (`list`, `tuple`, `dict`, `set`), and the special value `None`.\n- **Primitive types** are the most basic data types, representing single values.\n- **Composite types** can hold collections of data, which are more complex and provide various methods for data manipulation.\n- Understanding and effectively using these data types are crucial for developing efficient and maintainable Python programs. Practice with these types to become familiar with their properties and the operations that can be performed on them."
    }
  ]
}